// -Layout-
// Display  //
//   Flex   //
//   Grid
// Position //
// Float    //
// Spacing  //
//   Margin //
//   Padding//
// Dimension
//   width
//   height


/* =-= Display =-= */
@each $bkpt-label, $bkpt-width in $breakpoints {
  @media (min-width: $bkpt-width) {
    .#{$namespace}display-block#{$bkpt-label},
    .#{$namespace}dsp-blc#{$bkpt-label} {
      display: block;
    }
    .#{$namespace}display-inline-block#{$bkpt-label},
    .#{$namespace}dsp-ilb#{$bkpt-label} {
      display: inline-block;
    }
    .#{$namespace}display-inline#{$bkpt-label},
    .#{$namespace}dsp-inl#{$bkpt-label} {
      display: inline;
    }
  }
}

// Refactor: add selectors and display:none to a mixin; move to bottom of source?
@for $i from 1 through length($breakpoints) {
  $bkpt-label: nth(nth($breakpoints, $i), 1);
  $bkpt-value: nth(nth($breakpoints, $i), 2);
  $bkpt-next-value: nth(nth($breakpoints, $i), 2);
  @if $i < length($breakpoints) {
    $bkpt-next-value: nth(nth($breakpoints, $i + 1), 2) - .1px;
  }
  @if $i == 1 {
    @media (max-width: $bkpt-next-value) {
      .#{$namespace}display-none#{$bkpt-label},
      .#{$namespace}dsp-none#{$bkpt-label} {
        display: none;
      }
    }
  } @else if $i == length($breakpoints) {
    @media (min-width: $bkpt-value) {
      .#{$namespace}display-none#{$bkpt-label},
      .#{$namespace}dsp-none#{$bkpt-label} {
        display: none;
      }
    }
  } @else {
    @media (min-width: $bkpt-value) and (max-width: $bkpt-next-value) {
      .#{$namespace}display-none#{$bkpt-label},
      .#{$namespace}dsp-none#{$bkpt-label} {
        display: none;
      }
    }
  }
}


/* =-= Flex =-= */
// https://css-tricks.com/snippets/css/a-guide-to-flexbox/
@each $bkpt-label, $bkpt-width in $breakpoints {
  @media (min-width: $bkpt-width) {
    .#{$namespace}flex-direction-row#{$bkpt-label},
    .#{$namespace}flex-row#{$bkpt-label} {
      display: flex;
      flex-direction: row;
      &.#{$namespace}reverse {
        flex-direction: row-reverse;
      }
    }
    .#{$namespace}flex-direction-column#{$bkpt-label},
    .#{$namespace}flex-col#{$bkpt-label} {
      display: flex;
      flex-direction: column;
      &.#{$namespace}reverse {
        flex-direction: column-reverse;
      }
    }
    .#{$namespace}flex-wrap#{$bkpt-label} {
      flex-wrap: wrap;
      &.#{$namespace}reverse {
        flex-wrap: wrap-reverse;
      }
    }
    .#{$namespace}flex-nowrap#{$bkpt-label} {
      flex-wrap: nowrap;
    }
    @for $i from -5 through 5 { //opinionable
      @if $i < 0 {
        .#{$namespace}order-n#{-1 * $i}#{$bkpt-label} {
          order: $i;
        }
      }
      @else {
        .#{$namespace}order#{$i}#{$bkpt-label} {
          order: $i;
        }
      }
    }
    .#{$namespace}order-first#{$bkpt-label},
    .#{$namespace}ord-frst#{$bkpt-label} {
      order: -999;
    }
    .#{$namespace}order-last#{$bkpt-label},
    .#{$namespace}ord-last#{$bkpt-label} {
      order: 999;
    }
    
    // Refactor next parts using lists, loops, and conditionals
    
    .#{$namespace}justify-start#{$bkpt-label},
    .#{$namespace}jstf-sta#{$bkpt-label} {
      justify-content: flex-start;
    }
    .#{$namespace}justify-end#{$bkpt-label},
    .#{$namespace}jstf-end#{$bkpt-label} {
      justify-content: flex-end;
    }
    .#{$namespace}justify-center#{$bkpt-label},
    .#{$namespace}jstf-cnt#{$bkpt-label} {
      justify-content: center;
    }
    .#{$namespace}justify-between#{$bkpt-label},
    .#{$namespace}jst-btw#{$bkpt-label} {
      justify-content: space-between;
    }
    .#{$namespace}justify-around#{$bkpt-label},
    .#{$namespace}jstf-arn#{$bkpt-label} {
      justify-content: space-around;
    }
    .#{$namespace}justify-evenly#{$bkpt-label},
    .#{$namespace}jstf-evn#{$bkpt-label} {
      justify-content: space-around;
      justify-content: space-evenly;
    }
    
    .#{$namespace}align-content-stretch#{$bkpt-label},
    .#{$namespace}cont-str#{$bkpt-label} {
      align-content: stretch;
    }
    .#{$namespace}align-content-start#{$bkpt-label},
    .#{$namespace}cont-sta#{$bkpt-label} {
      align-content: flex-start;
    }
    .#{$namespace}align-content-end#{$bkpt-label},
    .#{$namespace}cont-end#{$bkpt-label} {
      align-content: flex-end;
    }
    .#{$namespace}align-content-center#{$bkpt-label},
    .#{$namespace}cont-cnt#{$bkpt-label} {
      align-content: center;
    }
    .#{$namespace}align-content-between#{$bkpt-label},
    .#{$namespace}cont-btw#{$bkpt-label} {
      align-content: space-between;
    }
    .#{$namespace}align-content-around#{$bkpt-label},
    .#{$namespace}cont-arn#{$bkpt-label} {
      align-content: space-around;
    }
    .#{$namespace}align-content-evenly#{$bkpt-label},
    .#{$namespace}cont-evn#{$bkpt-label} {
      align-content: space-around;
      align-content: space-evenly;
    }
    
    .#{$namespace}align-items-stretch#{$bkpt-label},
    .#{$namespace}itms-str#{$bkpt-label} {
      align-items: stretch;
    }
    .#{$namespace}align-items-start#{$bkpt-label},
    .#{$namespace}itms-sta#{$bkpt-label} {
      align-items: flex-start;
    }
    .#{$namespace}align-items-end#{$bkpt-label},
    .#{$namespace}itms-end#{$bkpt-label} {
      align-items: flex-end;
    }
    .#{$namespace}align-items-center#{$bkpt-label},
    .#{$namespace}itms-cnt#{$bkpt-label} {
      align-items: center;
    }
    .#{$namespace}align-items-baseline#{$bkpt-label},
    .#{$namespace}itms-bsl#{$bkpt-label} {
      align-items: baseline;
    }
    
    .#{$namespace}align-self-stretch#{$bkpt-label},
    .#{$namespace}self-str#{$bkpt-label} {
      align-self: stretch;
    }
    .#{$namespace}align-self-start#{$bkpt-label},
    .#{$namespace}self-sta#{$bkpt-label} {
      align-self: flex-start;
    }
    .#{$namespace}align-self-end#{$bkpt-label},
    .#{$namespace}self-end#{$bkpt-label} {
      align-self: flex-end;
    }
    .#{$namespace}align-self-center#{$bkpt-label},
    .#{$namespace}self-cnt#{$bkpt-label} {
      align-self: center;
    }
    .#{$namespace}align-self-baseline#{$bkpt-label},
    .#{$namespace}self-bsl#{$bkpt-label} {
      align-self: baseline;
    }
  }
}


/* =-= Grid =-= */


/* =-= Position =-= */
@each $bkpt-label, $bkpt-width in $breakpoints {
  @media (min-width: $bkpt-width) {
    .#{$namespace}position-static#{$bkpt-label},
    .#{$namespace}pos-sta#{$bkpt-label} {
      position: static;
    }
    .#{$namespace}position-relative#{$bkpt-label},
    .#{$namespace}pos-rel#{$bkpt-label} {
      position: relative;
    }
    .#{$namespace}position-absolute#{$bkpt-label},
    .#{$namespace}pos-abs#{$bkpt-label} {
      position: absolute;
    }
    .#{$namespace}position-fixed#{$bkpt-label},
    .#{$namespace}pos-fix#{$bkpt-label} {
      position: fixed;
    }
  }
}
// Top, right, bottom, left

/* =-= Float =-= */
@each $bkpt-label, $bkpt-width in $breakpoints {
  @media (min-width: $bkpt-width) {
    .#{$namespace}float-right#{$bkpt-label},
    .#{$namespace}flo-rgt#{$bkpt-label} {
      float: right;
    }
    .#{$namespace}float-left#{$bkpt-label},
    .#{$namespace}flo-lft#{$bkpt-label} {
      float: left;
    }
    .#{$namespace}clear-both#{$bkpt-label},
    .#{$namespace}clr-bth#{$bkpt-label} {
      clear: both;
    }
    .#{$namespace}clear-right#{$bkpt-label},
    .#{$namespace}clr-rgt#{$bkpt-label} {
      clear: right;
    }
    .#{$namespace}clear-left#{$bkpt-label},
    .#{$namespace}clr-lft#{$bkpt-label} {
      clear: left;
    }
  }
}

.#{$namespace}clearfix::after {
  display: block;
  clear: both;
  content: "";
}


/* =-= Spacing =-= */
// Refactor for shorter compiled file
// Refactor such that properties become more specific as going down, rather than by size
// Negative Margin
@each $bkpt-label, $bkpt-width in $breakpoints {
  @media (min-width: $bkpt-width) {
    @each $spacing-label, $spacing-size in $spacings {
      $spacing-size: $spacing-size * -1;
      @if $spacing-size != 0 {
        .#{$namespace}mn#{$spacing-label}#{$bkpt-label} {
          margin: $spacing-size;
        }
        .#{$namespace}myn#{$spacing-label}#{$bkpt-label} {
          margin-top: $spacing-size;
          margin-bottom: $spacing-size;
        }
        .#{$namespace}mxn#{$spacing-label}#{$bkpt-label} {
          margin-right: $spacing-size;
          margin-left: $spacing-size;
        }
        .#{$namespace}mtn#{$spacing-label}#{$bkpt-label} {
          margin-top: $spacing-size;
        }
        .#{$namespace}mrn#{$spacing-label}#{$bkpt-label} {
          margin-right: $spacing-size;
        }
        .#{$namespace}mbn#{$spacing-label}#{$bkpt-label} {
          margin-bottom: $spacing-size;
        }
        .#{$namespace}mln#{$spacing-label}#{$bkpt-label} {
          margin-left: $spacing-size;
        }
      }
    }
  }
}

// Positive Margin
@each $bkpt-label, $bkpt-width in $breakpoints {
  @media (min-width: $bkpt-width) {
    @each $spacing-label, $spacing-size in $spacings {
      .#{$namespace}m#{$spacing-label}#{$bkpt-label} {
        margin: $spacing-size;
      }
      .#{$namespace}my#{$spacing-label}#{$bkpt-label} {
        margin-top: $spacing-size;
        margin-bottom: $spacing-size;
      }
      .#{$namespace}mx#{$spacing-label}#{$bkpt-label} {
        margin-right: $spacing-size;
        margin-left: $spacing-size;
      }
      .#{$namespace}mt#{$spacing-label}#{$bkpt-label} {
        margin-top: $spacing-size;
      }
      .#{$namespace}mr#{$spacing-label}#{$bkpt-label} {
        margin-right: $spacing-size;
      }
      .#{$namespace}mb#{$spacing-label}#{$bkpt-label} {
        margin-bottom: $spacing-size;
      }
      .#{$namespace}ml#{$spacing-label}#{$bkpt-label} {
        margin-left: $spacing-size;
      }
    }
    .#{$namespace}ma#{$bkpt-label} {
      margin: auto;
    }
    .#{$namespace}mra#{$bkpt-label} {
      margin-right: auto;
    }
    .#{$namespace}mla#{$bkpt-label} {
      margin-left: auto;
    }
  }
}

// Padding
@each $bkpt-label, $bkpt-width in $breakpoints {
  @media (min-width: $bkpt-width) {
    @each $spacing-label, $spacing-size in $spacings {
      .#{$namespace}p#{$spacing-label}#{$bkpt-label} {
        padding: $spacing-size;
      }
      .#{$namespace}py#{$spacing-label}#{$bkpt-label} {
        padding-top: $spacing-size;
        padding-bottom: $spacing-size;
      }
      .#{$namespace}px#{$spacing-label}#{$bkpt-label} {
        padding-right: $spacing-size;
        padding-left: $spacing-size;
      }
      .#{$namespace}pt#{$spacing-label}#{$bkpt-label} {
        padding-top: $spacing-size;
      }
      .#{$namespace}pr#{$spacing-label}#{$bkpt-label} {
        padding-right: $spacing-size;
      }
      .#{$namespace}pb#{$spacing-label}#{$bkpt-label} {
        padding-bottom: $spacing-size;
      }
      .#{$namespace}pl#{$spacing-label}#{$bkpt-label} {
        padding-left: $spacing-size;
      }
    }
  }
}


/* =-= Dimension =-= */
  // Width, Min-Width, Max-Width; Height, Min-Height, Max-Height
    // em, px, vw, vh, %